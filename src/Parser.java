/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Parser implements ParserConstants {
  public static void main(String args []) throws ParseException
  {
    while (true)
    {
      System.out.println("Reading from standard input...");
      //System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
//      try
//      {
//        switch (EG1.one_line())
//        {
//          case 0 : 
//          System.out.println("OK.");
//          break;
//          case 1 : 
//          System.out.println("Goodbye.");
//          break;
//          default : 
//          break;
//        }
//      }
//      catch (Exception e)
//      {
//        System.out.println("NOK.");
//        System.out.println(e.getMessage());
//        EG1.ReInit(System.in);
//      }
//      catch (Error e)
//      {
//        System.out.println("Oops.");
//        System.out.println(e.getMessage());
//        break;
//      }
    }
  }

  static final public ArrayList<Template> Program() throws ParseException {
  ArrayList<Template> list = new ArrayList<Template>();
  Template1 ob1;
  Template2 ob2;
  Template ob;
    ob = Template();
    list.add(ob);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
    Apriori.flag.add(0);
        break;
      case OR:
        jj_consume_token(OR);
    Apriori.flag.add(1);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ob = Template();
      list.add(ob);
    }
    jj_consume_token(NEWLINE);
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public Template Template() throws ParseException {
  Template1 ob1;
  Template2 ob2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RULE:
    case BODY:
    case HEAD:
      ob1 = Template1();
    {if (true) return ob1;}
      break;
    case SIZEOF:
      ob2 = Template2();
    {if (true) return ob2;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Template1 Template1() throws ParseException {
  int primary;
  int secondary;
  ArrayList<String> itemSet = new ArrayList<String>();
  Template1 ob = new Template1();
    primary = Primary();
    ob.setPrimaryFlag(primary);
    jj_consume_token(HAS);
    secondary = Secondary();
    ob.setSecondaryFlag(secondary);
    jj_consume_token(OF);
    itemSet = Item();
    ob.itemSet = itemSet;
    ob.setTemplateFlag(0);
    {if (true) return ob;}
    throw new Error("Missing return statement in function");
  }

  static final public Template2 Template2() throws ParseException {
  int primary;
  Token t;
  int num;
  Template2 ob = new Template2();
    jj_consume_token(SIZEOF);
    jj_consume_token(LPAREN);
    primary = Primary();
    ob.setPrimaryFlag(primary);
    jj_consume_token(RPAREN);
    jj_consume_token(GTE);
    t = jj_consume_token(NUMBER);
    num = Integer.parseInt(t.image);
    ob.setNum(num);
    ob.setTemplateFlag(1);
    {if (true) return ob;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String> Item() throws ParseException {
  Token t;
  ArrayList<String> itemSet = new ArrayList<String>();
    label_2:
    while (true) {
      t = jj_consume_token(ITEM);
    itemSet.add(t.image.toString());
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ITEM);
    itemSet.add(t.image.toString());
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITEM:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
    }
    {if (true) return itemSet;}
    throw new Error("Missing return statement in function");
  }

  static final public int Primary() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RULE:
      t = jj_consume_token(RULE);
      {if (true) return 0;}
      break;
    case BODY:
      t = jj_consume_token(BODY);
      {if (true) return 1;}
      break;
    case HEAD:
      t = jj_consume_token(HEAD);
      {if (true) return 2;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int Secondary() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
      t = jj_consume_token(ANY);
      {if (true) return 0;}
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
      {if (true) return 1;}
      break;
    case NONE:
      t = jj_consume_token(NONE);
      {if (true) return 2;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3000,0x3000,0x270,0x20000,0x8000,0x70,0x4180,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
